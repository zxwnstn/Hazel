이번시간엔 코딩없이 카메라가 어떻게 작동하는지 그림으로 이해해 보는 시간이 될것이다.

카메라 라고 하는것은 그저 관념적인 카메라에 지나지 않는다. 카메라를 어떻게 정의할것인가??
첫번째로 우리가 씬을 어떻게 볼것인가?에 관한 문제다. 일단은 3d관점에서 보자
카메라는 근본적으로 world의 view에 관한것을 제공하는 도구이다.
3d world(컴퓨터에서 처리되는 개념적 3d)에는 우리가 정의한 객체들이 있을것이다. 
그것을 어떤 포인트(어떤위치)에서 바라보느냐가 카메라가 하는일일 것이다.

카메라의 광각은 좁을수도, 넓을수도 있다. 광각은 크게 45 65 90도가 될수있으며, 실제
사람의 광각 또는 피쉬 렌즈 또는 fairly wide ,12millimeter lens (fullframe sensor)는 가장자리가 심하게 왜곡될수도 있다. 일반적으로는 45, 65도 사이에서 결정한다.

카메라는 3d world에서 xyz좌표를 가질며, 회전할수도 있을것이고 aspect ratio 이런 정보를 담은수 있는데, 
이를 이해하기 위해 가장 중요한것은, '데이터'를 살펴보는 것이다. 카메라는 코드상에서 어떤 데이터를 담게 될까? opengl에서 카메라는 무엇을 의미하는 것일까

카메라와 큐브가 있다고 해보자, 처음엔 큐브의 정면을 보고있다고 했을때, 카메라를 위로 이동시키면, 실제로 화면에선 큐브의 윗부분이 출력되고 있을것이다.

카메라를 뒤로 옮겨보자. 큐브는 갑자기 작아진것 처럼 출력된다. 그렇다면 큐브 한개만 작아진 것일까? 그렇지 않다. 카메라로 보고 있는 모든 씬상의 오브젝트가 작아진 것이다. 따라서 카메라는 모든것에 영향을 미친다고 할수 있을것이다. BeginScene 함수는 인자로 Camera를 받을것이라 하였다. 왜냐? 씬에서 모든 객체는 그 카메라의 관점으로 출력될것이기 때문이다. 

우리가 실제로 카메라를 통해하는 것은 무엇인가? 씬에 담겨지는 모든 오브젝트를 카메라를 통해 transforamtion (perspective projection)시키는 것이다. 모든것이 카메라를통해 inverted된다는 사실이 중요하다. 따라서 카메라의 데이터는 transformation matrix 자체가 된다(view matrix). 우리가 카메라로 할수있는것은 오브젝트들을 invert 시키는것이아니라, 카메라를 invert시키는 것이다.

aspect ratio - projection matrix, perspective matrix

이러한 변환을 이해하기 위해 matrix 곱에대해 이해해야 될 필요가 있다.


한편 모든 행렬곱은 shader에서 처리될수있는데, shader는 object에 대해 각각 다른것이 적용될수도 있다.
따라서 모든 쉐이더를 Camera에 대해 update해주어야 한다.